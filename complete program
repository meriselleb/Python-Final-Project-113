# Final Project 113 Morning
# Meriselle Ruotolo
# Chrystal Mingo

import math
from tkinter import *
import tkinter.messagebox

# Part A and B: Meriselle Ruotolo
def get_letters_and_probability(n):
    N_DISPLAYABLE_CHAR = 54

    # opens word.txt
    file = open("Words.txt", "r")

    # string filled with all from textfile
    text_string = file.read()

    # letter_count initialized at zero
    letter_count = [0] * N_DISPLAYABLE_CHAR

    total = int(len(text_string))

    # counting the letters                                                  
    for i in range(len(text_string)):
        if text_string[i] == '\n' or text_string[i] == ' ' or text_string[i] == '\t':
            letter_count[53] += 1
        elif ord(text_string[i]) >= 65 and ord(text_string[i]) <= 90:
            letter_count[int(ord(text_string[i]) - 65)] += 1
        elif ord(text_string[i]) >= 97 and ord(text_string[i]) <= 122:
            letter_count[int(ord(text_string[i]) - 97 + 26)] += 1
        else:
            letter_count[52] +=1

    letter_count_pairs = []

    for i in range(N_DISPLAYABLE_CHAR):
        if i == 52:
            letter_count_pairs.append((letter_count[i], 'special characters'))
        elif i >= 0 and i < 26:
            letter_count_pairs.append((letter_count[i], chr(i + 65)))
        elif i >= 26 and i < 52:
            letter_count_pairs.append((letter_count[i], chr(i + 97 - 26)))
        else:   
            letter_count_pairs.append((letter_count[i], ' '))

    # sorting from greatest to least
    sorted_count = sorted(letter_count_pairs, reverse=True)

    # ensuring only letters that exist in the file are able to be chosen for pie chart\
    filtered_counts = []
    for i in range (0, n):
        if (sorted_count[i]) == 0:                                              # if n is greater than the amount of unique characters, only include unique characters
            continue
        filtered_counts.append(sorted_count[i])
        
    # PROBABILITY CALCULATIONS
    probabilities = []
    total_characters = int(len(text_string))
    for i in range (n):
        if filtered_counts[i][0] == 0:
            continue
        probabilities.append((filtered_counts[i][0] / total_characters, filtered_counts[i][1] ))

    sum_of_all = 0
    for i in range (len(probabilities)):
        sum_of_all += probabilities[i][0]

    all_other_probability = 1 - sum_of_all

    if all_other_probability > 0:
        probabilities.append((all_other_probability, "others"))

    return probabilities

#Chrystal Pie Chart
def pie_Chart():
    if int(ninput.get()) > 54 or int(ninput.get()) < 0:
        tkinter.messagebox.showinfo("ERROR", "Invalid input. Please enter a non-negative integer less than 54.")
        return 1

    import turtle
    from turtle import Turtle, Screen
    import itertools
    from itertools import cycle

    n = int(ninput.get())

    probabilities = get_letters_and_probability(n)
    
    turtle.clearscreen()

    # pie chart specifications
    radius = 140
    radius_of_label = radius * 1.50
    turtle.setup(750, 750)
    chart = Turtle()
    chart.penup()
    chart.sety(-radius)
    chart.pendown()
    
    # pie chart customizations
    fontSize = 12
    Font = ("Ariel", fontSize)
    colors = cycle(['crimson', 'dark orange', 'dark orchid' , 'Medium Slate Blue', 'thistle', 'Misty Rose', \
                    'aquamarine', 'cyan', 'sky blue', 'gray', 'purple', 'lavender', \
                    'magenta', 'seashell', 'brown', 'dark olive green', 'spring green', 'navy', 'tan', \
                    'steel blue', 'green yellow', 'firebrick', 'maroon', 'light cyan', \
                    'sandy brown', 'dark green', 'light coral', 'pink', 'pale violet red', \
                    'yellow', 'blue', 'green', 'red', 'orange','hot pink', 'lime', \
                    'Dark Slate Gray' , 'Linen','medium orchid', 'Honeydew', \
                    'lawn green', 'Dodger Blue', 'Gold', 'royal blue' , 'dark red', \
                    'cornflower blue', 'Beige', 'Wheat' , 'Khaki', 'Saddle brown', 'tomato', 'peru', 'thistle', 'olive drab'])

    count = 0
    for probability, letter in probabilities:
        print(probability)
        count += 1
        chart.fillcolor(next(colors))
        chart.begin_fill()
        chart.circle(radius, probability * 360)
        position = chart.position()
        if n > 0:
            chart.goto(0, 0) #origin
        chart.end_fill()
        chart.setpos(position)
    chart.penup()
    chart.sety(-radius_of_label)

    second_count = -1
    for label, i in probabilities:
        second_count += 1
        format_label = format(label, '.4f')
        label_of_part = " = " + format_label
        chart.circle(radius_of_label, label * 360 / 2)
        chart.write(i + label_of_part, align="center", font=Font)
        chart.circle(radius_of_label, label * 360/ 2)

    chart.hideturtle()
    screen = Screen()
    screen.exitonclick()

#Creating the interface 
# rewrite later
interface = Tk()
interface.title("interface")
interface.geometry("470x125")

Title = Label(interface, text = "Final Project", font=("bold", 15))
Title.grid(row=0, columnspan=90)

ninput = Entry(interface)
ninput.grid(row = 2, column= 1)
inplabel = Label(interface, text = "n = ")
inplabel.grid(row = 2, sticky = E)
nrestrict = Label(interface, text = "(Integer n must satisfy this condition 0 â‰¤  n < 54)")
nrestrict.grid(row = 2, column = 3, sticky = W)

Descript = Label(interface, text = "This program will draw a pie chart of the n most frequent letters in your file 'Words.txt'.\n")
Descript.grid(row =1, columnspan=90)

create = Button(interface, text='Create', command= pie_Chart)
create.grid(row = 2, column= 2, sticky = E)

exitbutton = Button(interface, text='Quit', command=interface.quit)
exitbutton.grid(row = 3, column = 1, sticky = W)


#End of interface
interface.mainloop()

